name: CI/CD Pipeline - خدمة الرسائل

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7.0'

jobs:
  test:
    name: 🧪 اختبار الكود
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_naebak_messaging
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7.0
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 استنساخ الكود
      uses: actions/checkout@v4
    
    - name: 🐍 إعداد Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 تثبيت المتطلبات
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: 🔍 فحص جودة الكود
      run: |
        flake8 messages/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 messages/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 🧪 تشغيل الاختبارات
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_naebak_messaging
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
      run: |
        python manage.py collectstatic --noinput
        python manage.py migrate --settings=messaging_service.test_settings
        python -m pytest tests/ --cov=messages --cov-report=xml --cov-report=term-missing
    
    - name: 📊 رفع تغطية الكود
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: 🔒 فحص الأمان
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 استنساخ الكود
      uses: actions/checkout@v4
    
    - name: 🐍 إعداد Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🔒 فحص الثغرات الأمنية
      run: |
        pip install safety bandit
        safety check --json
        bandit -r messages/ -f json
    
    - name: 🔍 فحص التبعيات
      run: |
        pip install pip-audit
        pip-audit --format=json

  build:
    name: 🏗️ بناء Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 استنساخ الكود
      uses: actions/checkout@v4
    
    - name: 🐳 إعداد Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 تسجيل الدخول إلى Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: 🏗️ بناء ورفع Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          naebak/messaging-service:latest
          naebak/messaging-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: 🚀 نشر الخدمة
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 استنساخ الكود
      uses: actions/checkout@v4
    
    - name: 🚀 نشر إلى الخادم
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd /opt/naebak-messaging-service
          git pull origin main
          docker-compose pull
          docker-compose up -d --no-deps messaging-service
          docker-compose exec -T messaging-service python manage.py migrate
          docker-compose exec -T messaging-service python manage.py collectstatic --noinput
    
    - name: 🔔 إشعار النشر
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          🚀 تم نشر خدمة الرسائل بنجاح!
          📦 الإصدار: ${{ github.sha }}
          🌐 البيئة: الإنتاج
          ⏰ الوقت: ${{ github.event.head_commit.timestamp }}

  notification:
    name: 🔔 إشعار النتائج
    runs-on: ubuntu-latest
    needs: [test, security, build, deploy]
    if: always()
    
    steps:
    - name: 📧 إرسال إشعار البريد الإلكتروني
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "نتائج CI/CD - خدمة الرسائل"
        body: |
          مرحباً فريق التطوير،
          
          تم تشغيل pipeline CI/CD لخدمة الرسائل:
          
          📊 نتائج الاختبارات: ${{ needs.test.result }}
          🔒 نتائج فحص الأمان: ${{ needs.security.result }}
          🏗️ نتائج البناء: ${{ needs.build.result }}
          🚀 نتائج النشر: ${{ needs.deploy.result }}
          
          📦 الكوميت: ${{ github.sha }}
          🌿 البرانش: ${{ github.ref }}
          👤 المطور: ${{ github.actor }}
          
          تحياتي،
          نظام CI/CD - منصة نائبك.كوم
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: noreply@naebak.com
